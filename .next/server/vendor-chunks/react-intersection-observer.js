"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-intersection-observer";
exports.ids = ["vendor-chunks/react-intersection-observer"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-intersection-observer/react-intersection-observer.m.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-intersection-observer/react-intersection-observer.m.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InView: () => (/* binding */ InView),\n/* harmony export */   \"default\": () => (/* binding */ InView),\n/* harmony export */   defaultFallbackInView: () => (/* binding */ defaultFallbackInView),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   useInView: () => (/* binding */ useInView)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/ function defaultFallbackInView(inView) {\n    unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */ function getRootId(root) {\n    if (!root) return \"0\";\n    if (RootIds.has(root)) return RootIds.get(root);\n    rootId += 1;\n    RootIds.set(root, rootId.toString());\n    return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */ function optionsToId(options) {\n    return Object.keys(options).sort().filter(function(key) {\n        return options[key] !== undefined;\n    }).map(function(key) {\n        return key + \"_\" + (key === \"root\" ? getRootId(options.root) : options[key]);\n    }).toString();\n}\nfunction createObserver(options) {\n    // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n    var id = optionsToId(options);\n    var instance = observerMap.get(id);\n    if (!instance) {\n        // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n        var elements = new Map();\n        var thresholds;\n        var observer = new IntersectionObserver(function(entries) {\n            entries.forEach(function(entry) {\n                var _elements$get;\n                // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n                // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n                var inView = entry.isIntersecting && thresholds.some(function(threshold) {\n                    return entry.intersectionRatio >= threshold;\n                }); // @ts-ignore support IntersectionObserver v2\n                if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n                    // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n                    // @ts-ignore\n                    entry.isVisible = inView;\n                }\n                (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function(callback) {\n                    callback(inView, entry);\n                });\n            });\n        }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n        thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [\n            options.threshold || 0\n        ]);\n        instance = {\n            id: id,\n            observer: observer,\n            elements: elements\n        };\n        observerMap.set(id, instance);\n    }\n    return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */ function observe(element, callback, options, fallbackInView) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (fallbackInView === void 0) {\n        fallbackInView = unsupportedValue;\n    }\n    if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== undefined) {\n        var bounds = element.getBoundingClientRect();\n        callback(fallbackInView, {\n            isIntersecting: fallbackInView,\n            target: element,\n            intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n            time: 0,\n            boundingClientRect: bounds,\n            intersectionRect: bounds,\n            rootBounds: bounds\n        });\n        return function() {};\n    } // An observer with the same options can be reused, so lets use this fact\n    var _createObserver = createObserver(options), id = _createObserver.id, observer = _createObserver.observer, elements = _createObserver.elements; // Register the callback listener for this element\n    var callbacks = elements.get(element) || [];\n    if (!elements.has(element)) {\n        elements.set(element, callbacks);\n    }\n    callbacks.push(callback);\n    observer.observe(element);\n    return function unobserve() {\n        // Remove the callback from the callback list\n        callbacks.splice(callbacks.indexOf(callback), 1);\n        if (callbacks.length === 0) {\n            // No more callback exists for element, so destroy it\n            elements[\"delete\"](element);\n            observer.unobserve(element);\n        }\n        if (elements.size === 0) {\n            // No more elements are being observer by this instance, so destroy it\n            observer.disconnect();\n            observerMap[\"delete\"](id);\n        }\n    };\n}\nvar _excluded = [\n    \"children\",\n    \"as\",\n    \"triggerOnce\",\n    \"threshold\",\n    \"root\",\n    \"rootMargin\",\n    \"onChange\",\n    \"skip\",\n    \"trackVisibility\",\n    \"delay\",\n    \"initialInView\",\n    \"fallbackInView\"\n];\nfunction isPlainChildren(props) {\n    return typeof props.children !== \"function\";\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */ var InView = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(InView, _React$Component);\n    function InView(props) {\n        var _this;\n        _this = _React$Component.call(this, props) || this;\n        _this.node = null;\n        _this._unobserveCb = null;\n        _this.handleNode = function(node) {\n            if (_this.node) {\n                // Clear the old observer, before we start observing a new element\n                _this.unobserve();\n                if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n                    // Reset the state if we get a new node, and we aren't ignoring updates\n                    _this.setState({\n                        inView: !!_this.props.initialInView,\n                        entry: undefined\n                    });\n                }\n            }\n            _this.node = node ? node : null;\n            _this.observeNode();\n        };\n        _this.handleChange = function(inView, entry) {\n            if (inView && _this.props.triggerOnce) {\n                // If `triggerOnce` is true, we should stop observing the element.\n                _this.unobserve();\n            }\n            if (!isPlainChildren(_this.props)) {\n                // Store the current State, so we can pass it to the children in the next render update\n                // There's no reason to update the state for plain children, since it's not used in the rendering.\n                _this.setState({\n                    inView: inView,\n                    entry: entry\n                });\n            }\n            if (_this.props.onChange) {\n                // If the user is actively listening for onChange, always trigger it\n                _this.props.onChange(inView, entry);\n            }\n        };\n        _this.state = {\n            inView: !!props.initialInView,\n            entry: undefined\n        };\n        return _this;\n    }\n    var _proto = InView.prototype;\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n        // If a IntersectionObserver option changed, reinit the observer\n        if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n            this.unobserve();\n            this.observeNode();\n        }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.unobserve();\n        this.node = null;\n    };\n    _proto.observeNode = function observeNode() {\n        if (!this.node || this.props.skip) return;\n        var _this$props = this.props, threshold = _this$props.threshold, root = _this$props.root, rootMargin = _this$props.rootMargin, trackVisibility = _this$props.trackVisibility, delay = _this$props.delay, fallbackInView = _this$props.fallbackInView;\n        this._unobserveCb = observe(this.node, this.handleChange, {\n            threshold: threshold,\n            root: root,\n            rootMargin: rootMargin,\n            // @ts-ignore\n            trackVisibility: trackVisibility,\n            // @ts-ignore\n            delay: delay\n        }, fallbackInView);\n    };\n    _proto.unobserve = function unobserve() {\n        if (this._unobserveCb) {\n            this._unobserveCb();\n            this._unobserveCb = null;\n        }\n    };\n    _proto.render = function render() {\n        if (!isPlainChildren(this.props)) {\n            var _this$state = this.state, inView = _this$state.inView, entry = _this$state.entry;\n            return this.props.children({\n                inView: inView,\n                entry: entry,\n                ref: this.handleNode\n            });\n        }\n        var _this$props2 = this.props, children = _this$props2.children, as = _this$props2.as, props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(as || \"div\", _extends({\n            ref: this.handleNode\n        }, props), children);\n    };\n    return InView;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\nInView.displayName = \"InView\";\nInView.defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false\n};\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */ function useInView(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp, threshold = _ref.threshold, delay = _ref.delay, trackVisibility = _ref.trackVisibility, rootMargin = _ref.rootMargin, root = _ref.root, triggerOnce = _ref.triggerOnce, skip = _ref.skip, initialInView = _ref.initialInView, fallbackInView = _ref.fallbackInView;\n    var unobserve = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        inView: !!initialInView\n    }), state = _React$useState[0], setState = _React$useState[1];\n    var setRef = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(node) {\n        if (unobserve.current !== undefined) {\n            unobserve.current();\n            unobserve.current = undefined;\n        } // Skip creating the observer\n        if (skip) return;\n        if (node) {\n            unobserve.current = observe(node, function(inView, entry) {\n                setState({\n                    inView: inView,\n                    entry: entry\n                });\n                if (entry.isIntersecting && triggerOnce && unobserve.current) {\n                    // If it should only trigger once, unobserve the element after it's inView\n                    unobserve.current();\n                    unobserve.current = undefined;\n                }\n            }, {\n                root: root,\n                rootMargin: rootMargin,\n                threshold: threshold,\n                // @ts-ignore\n                trackVisibility: trackVisibility,\n                // @ts-ignore\n                delay: delay\n            }, fallbackInView);\n        }\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        Array.isArray(threshold) ? threshold.toString() : threshold,\n        root,\n        rootMargin,\n        triggerOnce,\n        skip,\n        trackVisibility,\n        fallbackInView,\n        delay\n    ]);\n    /* eslint-disable-next-line */ (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n            // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n            // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n            setState({\n                inView: !!initialInView\n            });\n        }\n    });\n    var result = [\n        setRef,\n        state.inView,\n        state.entry\n    ]; // Support object destructuring, by adding the specific values.\n    result.ref = result[0];\n    result.inView = result[1];\n    result.entry = result[2];\n    return result;\n}\n //# sourceMappingURL=react-intersection-observer.m.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-intersection-observer/react-intersection-observer.m.js\n");

/***/ })

};
;